load("@gazelle//:def.bzl", "gazelle", "gazelle_test")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_rust//rust:defs.bzl", "rust_library_group")
load("@rules_rust_prost//:defs.bzl", "rust_prost_toolchain")

# gazelle:prefix vimana.host
# gazelle:exclude runtime
gazelle(name = "gazelle")

# Verify that all BUILD files are up to date.
gazelle_test(
    name = "gazelle_test",
    workspace = "//:BUILD.bazel",  # Marker file indicating workspace root.
)

compile_pip_requirements(
    name = "requirements",
    src = "requirements.txt",
    requirements_txt = "requirements.txt.lock",
)

# Set up a Prost Bazel toolchain
# using the Prost and Tonic binaries referenced in `MODULE.bazel`
# http://bazelbuild.github.io/rules_rust/rust_proto.html#custom-prost-deps

rust_library_group(
    name = "prost-runtime",
    deps = ["@crates//:prost"],
)

rust_library_group(
    name = "tonic-runtime",
    deps = [
        ":prost-runtime",
        "@crates//:tonic",
    ],
)

rust_prost_toolchain(
    name = "prost-toolchain-impl",
    # Options are derived from https://docs.rs/prost-build/0.13.4/prost_build/struct.Config.html.
    # Syntax examples: https://docs.rs/protoc-gen-prost/0.4.0/protoc_gen_prost/.
    prost_opts = [
        # Use Rust's `bytes::Bytes` instead of `Vec<u8>` to represent Protobuf `bytes` fields.
        "bytes=.",
        # Leave enum value names unchanged.
        "retain_enum_prefix",
        # Enable serde to serialize messages as JSON.
        # https://github.com/bazelbuild/rules_rust/issues/2831
        #"type_attribute=.=#[derive(serde::Serialize)]",
    ],
    prost_plugin = "@crates//:protoc-gen-prost__protoc-gen-prost",
    prost_runtime = ":prost-runtime",
    prost_types = "@crates//:prost-types",
    tonic_plugin = "@crates//:protoc-gen-tonic__protoc-gen-tonic",
    tonic_runtime = ":tonic-runtime",
)

toolchain(
    name = "protoc-rust-toolchain",
    toolchain = "prost-toolchain-impl",
    toolchain_type = "@rules_rust_prost//:toolchain_type",
)
