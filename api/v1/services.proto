syntax = "proto3";

package vimana.api.v1;

import "google/api/annotations.proto";

option go_package = "api.vimana.host/v1/services";

// Services exist within a domain.
// They are used to configure attributes that do not change across versions,
// such as deployment configuration, traffic optimization, and OTLP export.
// Each service may contain zero or more components (versioned implementations).
service Services {

  // Create a new service within a domain.
  rpc Create(CreateServiceRequest) returns (CreateServiceResponse) {
    option (google.api.http) = {
      post : "/v1/services/{domain}/{name}"
      body : "service"
    };
  }

  // List services within a domain.
  rpc List(ListServicesRequest) returns (ListServicesResponse) {
    option (google.api.http) = {
      get : "/v1/services/{domain}"
    };
  }

  // Get details about a service.
  rpc Get(GetServiceRequest) returns (Service) {
    option (google.api.http) = {
      get : "/v1/services/{domain}/{name}"
    };
  }

  // Adjust service configuration.
  rpc Update(UpdateServiceRequest) returns (Service) {
    option (google.api.http) = {
      patch : "/v1/services/{domain}/{name}"
      body : "service"
    };
  }

  // Delete a service.
  // The service will immediately become unavailable!
  rpc Delete(DeleteServiceRequest) returns (DeleteServiceResponse) {
    option (google.api.http) = {
      delete : "/v1/services/{domain}/{name}"
    };
  }
}

message CreateServiceRequest {
  // A name for the new service.
  // Must be unique within the domain.
  string name = 1;

  // Name (either canonical or alias) of the domain
  // in which to create the new service.
  // Must be owned by the caller.
  string domain = 2;

  // Initial configuration of the service.
  Service service = 3;
}

message CreateServiceResponse {}

// TODO: Keep editing from here...

message ListServicesRequest {
  // The maximum number of domains to list in a single response.
  // If unspecified, defaults to 64.
  // Values greater than 64 are ignored.
  uint32 page_size = 1;

  // Optional page token from a previous call to [Services.List].
  // Use this to retrieve the subsequent page.
  //
  // If provided, all other fields are ignored.
  string page_token = 2;
}

message ListServicesResponse {
  // Canonical names of domains owned by the caller.
  repeated string domains = 1;

  // If there are more results than would fit on one page,
  // use this in a subsequent call to retrieve the next page.
  // The absence of this field indicates no further results.
  string next_page_token = 2;
}

message GetServiceRequest {
  // Either a canonical domain name or a registered alias domain name.
  string name = 1;
}

message UpdateServiceRequest {
  // Either a canonical domain name or a registered alias domain name.
  string name = 1;

  // Email addresses to send invitations to own the domain.
  repeated string additions = 2;

  // Email addresses of pending or confirmed owners to remove from the domain.
  repeated string removals = 3;
}

message UpdateOwnersRequest {
  // Either a canonical domain name or a registered alias domain name.
  string name = 1;

  // Email addresses to send invitations to own the domain.
  repeated string additions = 2;

  // Email addresses of pending or confirmed owners to remove from the domain.
  repeated string removals = 3;
}

message DeleteServiceRequest {
  // Either a canonical domain name or a registered alias domain name.
  string name = 1;
}

message DeleteServiceResponse {}

message Service {
  // Whether to optimize for latency or cost.
  Target target = 1;

  // If configured, use a regional deployment
  // to restrict traffic to the region in which it originates.
  // If omitted (such as by default), use a global deployment.
  Regional regional = 2;

  // OpenTelemetry export configuration.
  OpenTelemetry otlp = 3;

  // Service deployment strategy optimization target.
  enum Target {
    LATENCY = 0;
    COST = 1;
  }

  // Configuration relevant to regional services.
  message Regional {
    // List of regions in which to run this service.
    repeated string regions = 1;

    // Enabling failover allows traffic to be routed across regions
    // in case of unavailability in the client's region.
    bool failover = 2;
  }

  // OpenTelemetry export configuration.
  message OpenTelemetry {
    // Target URL to which to send spans, metrics, and logs
    // *e.g.* `https://TODO`
    // Subject to secret value substitution.
    string endpoint = 1;

    // Request headers to send with every request. Useful for authorization.
    // Subject to secret value substitution.
    map<string, string> headers = 2;

    // Transport protocol.
    Protocol protocol = 3;

    // OpenTelemetry export transport protocols.
    enum Protocol {
      GRPC = 0;
      HTTP_JSON = 1;
      HTTP_PROTOBUF = 2;
    }
  }
}