syntax = "proto3";

package vimana.api.v1;

import "google/api/annotations.proto";

option go_package = "api.vimana.host/v1/domains";

// Domains are at the top-most level in the resource hierarchy.
// Each domain must belong to one or more owners,
// may be associated with zero or more aliases,
// and may contain zero or more services.
service Domains {

  // Create a new canonical domain owned by the caller.
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post : "/v1/domains"
      body : "*"
    };
  }

  // List canonical domains owned by the caller.
  rpc List(ListRequest) returns (ListResponse) {
    option (google.api.http) = {
      get : "/v1/domains"
    };
  }

  // Get details about a domain.
  //
  // The caller must be an owner.
  rpc Get(GetRequest) returns (Domain) {
    option (google.api.http) = {
      get : "/v1/domains/{name}"
    };
  }

  // Add or remove aliases for a domain.
  //
  // The caller must be an owner.
  rpc UpdateAliases(UpdateAliasesRequest) returns (Domain) {
    option (google.api.http) = {
      patch : "/v1/domains/{name}/aliases"
      body : "*"
    };
  }

  // Add or remove owners for a domain.
  //
  // The caller must be an owner.
  // Fails if the update would remove all confirmed owners.
  // Instead, use [Delete] to remove all owners
  // and permanently shut down a domain.
  //
  // Adding a new owner sends an invitation that must be confirmed.
  //
  // Ownership of a domain confers complete authority over all the resources
  // within that domain, so it's strongly encouraged to keep ownership as tight
  // as possible.
  rpc UpdateOwners(UpdateOwnersRequest) returns (Domain) {
    option (google.api.http) = {
      patch : "/v1/domains/{name}/owners"
      body : "*"
    };
  }

  // Delete a domain.
  // Any services running under this domain will stop working!
  //
  // The caller must be an owner.
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete : "/v1/domains/{name}"
    };
  }
}

message CreateRequest {}

message CreateResponse {
  // Canonical name of the new domain.
  repeated string name = 1;
}

message ListRequest {
  // The maximum number of domains to list in a single response.
  // If unspecified, defaults to 64.
  // Values greater than 64 are ignored.
  uint32 page_size = 1;

  // Optional page token from a previous call to [List].
  // Use this to retrieve the subsequent page.
  //
  // If provided, all other fields are ignored.
  string page_token = 2;
}

message ListResponse {
  // Canonical names of domains owned by the caller.
  repeated string domains = 1;

  // If there are more results than would fit on one page,
  // use this in a subsequent call to retrieve the next page.
  // The absence of this field indicates no further results.
  string next_page_token = 2;
}

message GetRequest {
  // Either a canonical domain name or a registered alias domain name.
  string name = 1;
}

message UpdateAliasesRequest {
  // Either a canonical domain name or a registered alias domain name.
  string name = 1;

  // Email addresses to send invitations to own the domain.
  repeated string additions = 2;

  // Email addresses of pending or confirmed owners to remove from the domain.
  repeated string removals = 3;
}

message UpdateOwnersRequest {
  // Either a canonical domain name or a registered alias domain name.
  string name = 1;

  // Email addresses to send invitations to own the domain.
  repeated string additions = 2;

  // Email addresses of pending or confirmed owners to remove from the domain.
  repeated string removals = 3;
}

message DeleteRequest {
  // Either a canonical domain name or a registered alias domain name.
  string name = 1;
}

message DeleteResponse {}

message Domain {
  // Canonical name of the domain.
  string name = 1;

  // Registered aliases for the domain.
  // A domain can have at most 32 aliases.
  repeated string aliases = 2;

  // Confirmed and pending owners for the domain.
  // A domain must have at least 1 confirmed owner,
  // and can have at most 32 owners total.
  repeated Owner owners = 3;

  message Owner {
    // For pending owners,
    // the email address to which the invitation was sent.
    // For confirmed owners,
    // the email address currently associated with the user's account.
    string email = 1;

    // Pending / confirmation status.
    Status status = 2;

    enum Status {
      // The prospective owner has been invited but has not yet accepted.
      PENDING = 0;

      // The owner has accepted their invitation.
      CONFIRMED = 1;
    }
  }
}