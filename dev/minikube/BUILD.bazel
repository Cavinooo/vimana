load("@rules_oci//oci:defs.bzl", "oci_image", "oci_load", "oci_push")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load(":platform-executable.bzl", "platform_executable")

# Name of some registry we can push / pull images to / from.
local_registry = "localhost:5000"

# Name of the same registry as `local_registry`,
# as it would appear from inside the cluster.
cluster_registry = "host.minikube.internal:5000"

kicbase_image_name = "kicbase-workd"

kicbase_tag = "latest"

kicbase_local_repo = local_registry + "/" + kicbase_image_name + ":" + kicbase_tag

# Start a Vimana-enabled minikube cluster locally.
sh_binary(
    name = "restart",
    srcs = ["restart.sh"],
    args = [
        "$(rootpath @rules_k8s//:kubectl)",
        "$(rootpath @rules_k8s//:istioctl)",
        "$(rootpath @rules_k8s//:minikube)",
        "$(rootpath @rules_k8s//:minikube-bin)",
        "$(rootpath :kicbase-image-push-local)",
        kicbase_local_repo,
        cluster_registry,
    ],
    data = [
        ":kicbase-image-push-local",
        "@rules_k8s//:istioctl",
        "@rules_k8s//:kubectl",
        "@rules_k8s//:minikube",
        "@rules_k8s//:minikube-bin",
    ],
)

# If there's a running minikube cluster started by `:start`,
# this action uploads a fresh build of `workd` to the running kicbase container
# then restarts the daemon.
sh_binary(
    name = "hotswap",
    srcs = ["hotswap.sh"],
    args = [
        "$(rootpath @rules_k8s//:minikube)",
        "$(rootpath @rules_k8s//:minikube-bin)",
        "$(rootpath @rules_k8s//:kubectl)",
        "$(rootpath //work/runtime:workd)",
    ],
    data = [
        "//work/runtime:workd",
        "@rules_k8s//:kubectl",
        "@rules_k8s//:minikube",
        "@rules_k8s//:minikube-bin",
    ],
)

# Kicbase (Kubernetes In (a) Container base?) is like the node image for Minikube.
oci_image(
    name = "kicbase-image",
    base = "@kicbase",
    # Layer `workd` on top of it to enable Vimana on Minikube.
    tars = [":workd-tar"],
)

pkg_tar(
    name = "workd-tar",
    srcs = [
        # Workd SystemD unit file.
        ":workd.kicbase.service",
        # Workd binary built for the container.
        ":workd-x86_64-linux",
        # We need a more modern version of `crictl` than the one that ships with Kicbase by default.
        "@rules_k8s//:crictl-x86_64-linux",
    ],
    remap_paths = {
        "/workd.kicbase.service": "/etc/systemd/system/workd.service",
        "/workd-x86_64-linux": "/usr/bin/workd",
        # Bazel downloader adds the `.exe` suffix no matter what the execution platform is.
        "/crictl-x86_64-linux.exe": "/usr/bin/crictl",
    },
)

oci_push(
    name = "kicbase-image-push-local",
    image = ":kicbase-image",
    remote_tags = [kicbase_tag],
    repository = local_registry + "/" + kicbase_image_name,
)

oci_load(
    name = "kicbase-image-load",
    image = ":kicbase-image",
    repo_tags = [kicbase_image_name + ":" + kicbase_tag],
)

platform_executable(
    name = "workd-x86_64-linux",
    platform = ":x86_64-linux",
    target = "//work/runtime:workd",
)

platform(
    name = "x86_64-linux",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
)
