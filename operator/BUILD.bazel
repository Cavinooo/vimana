load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@rules_k8s//:resource.bzl", "kubectl_apply", "kubectl_delete")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_load", "oci_push")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("//dev:sh-in-place.bzl", "sh_in_place")

local_registry = "localhost:5000"

operator_image_name = "vimana-operator"

latest_tag = "latest"

# Equivalent of `make docker-build` in a normal Operator SDK project.
oci_image(
    name = "image",
    base = "@distroless-static",
    entrypoint = ":image-entrypoint",
    tars = [":image-tar"],
    user = "65532:65532",
    workdir = "/",
)

# Equivalent of `make docker-push` in a normal Operator SDK project.
oci_push(
    name = "image-push-local",
    image = ":image",
    remote_tags = [latest_tag],
    repository = local_registry + "/" + operator_image_name,
)

oci_load(
    name = "image-load",
    image = ":image",
    repo_tags = [operator_image_name + ":" + latest_tag],
)

pkg_tar(
    name = "image-tar",
    srcs = ["//operator/cmd"],
)

write_file(
    name = "image-entrypoint",
    out = "image-entrypoint.txt",
    content = ["/manager"],  # Operator SDK convention.
)

# Equivalent to `make install` in a normal Operator SDK project.
kubectl_apply(
    name = "install",
    srcs = [":install-resources"],
)

# Equivalent to `make uninstall` in a normal Operator SDK project.
kubectl_delete(
    name = "uninstall",
    srcs = [":install-resources"],
)

# Equivalent to `make deploy` in a normal Operator SDK project.
# Importantly, however, any prerequisite `kustomize edit set` command
# must be executed in the source tree separately.
# See `:kustomize-manager` for a script to accomplish that.
kubectl_apply(
    name = "deploy",
    srcs = [":deploy-resources"],
)

# Equivalent to `make undeploy` in a normal Operator SDK project.
# Importantly, however, any prerequisite `kustomize edit set` command
# must be executed in the source tree separately.
# See `:kustomize-manager` for a script to accomplish that.
kubectl_delete(
    name = "undeploy",
    srcs = [":deploy-resources"],
)

# Equivalent of `make manifests` in a normal Operator SDK project.
# Running this command will mutate the source tree in-place!
sh_in_place(
    name = "manifests",
    command = " ".join([
        "\"$(location @rules_k8s//:controller-gen)\"",
        "rbac:roleName=manager-role",
        "crd",
        "webhook",
        "paths=\"./...\"",
        "output:crd:artifacts:config=config/crd/bases",
    ]),
    data = [
        "@rules_k8s//:controller-gen",
    ],
)

# Equivalent of `make generate` in a normal Operator SDK project.
# Running this command will mutate the source tree in-place!
sh_in_place(
    name = "generate",
    command = " ".join([
        "\"$(location @rules_k8s//:controller-gen)\"",
        "object:headerFile='/dev/null'",
        "paths=\"./...\"",
    ]),
    data = [
        "@rules_k8s//:controller-gen",
    ],
)

# Partially equivalent to `make install` or `make uninstall` in a normal Operator SDK project
# (if combined with `kubectl apply` or `kubectl delete`).
genrule(
    name = "install-resources",
    srcs = ["//operator/config"],
    outs = ["install.yaml"],
    # The default load restrictor prevents loading symlinks that point outside the project root.
    # Since Bazel sandboxes use such symlinks, disable the load restrictor.
    cmd = "./$(location @rules_k8s//:kustomize) build" +
          " --load-restrictor=LoadRestrictionsNone" +
          " operator/config/crd > \"$@\"",
    tools = ["@rules_k8s//:kustomize"],
)

# Partially equivalent to `make deploy` or `make undeploy` in a normal Operator SDK project
# (if combined with `kubectl apply` or `kubectl delete`).
# Importantly, however, any prerequisite `kustomize edit set` command
# must be executed in the source tree separately.
# See `:kustomize-manager` for a script to accomplish that.
genrule(
    name = "deploy-resources",
    srcs = ["//operator/config"],
    outs = ["deploy.yaml"],
    # The default load restrictor prevents loading symlinks that point outside the project root.
    # Since Bazel sandboxes use such symlinks, disable the load restrictor.
    cmd = "./$(location @rules_k8s//:kustomize) build" +
          " --load-restrictor=LoadRestrictionsNone" +
          " operator/config/default > \"$@\"",
    tools = ["@rules_k8s//:kustomize"],
)

# Script to update the image name / tag referenced by the operator manager.
# That image name / tag must match the repo name in `:image`.
# This script keeps the two in sync, but the kustomization can be checked into version control,
# so it only has to run if `operator_image_name` (or the tag) changes for some reason.
# Otherwise, it is a no-op.
sh_in_place(
    name = "kustomize-manager",
    command = " ".join([
        "cd",
        "config/manager",
        "&&",
        "\"$(location @rules_k8s//:kustomize)\"",
        "edit",
        "set",
        "image",
        "controller=\"{}\"".format(operator_image_name + ":" + latest_tag),
    ]),
    data = ["@rules_k8s//:kustomize"],
)
