module(name = "vimana")

bazel_dep(name = "buildifier_prebuilt", version = "7.3.1", dev_dependency = True, repo_name = "buildtools")

bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "gazelle", version = "0.40.0")
bazel_dep(name = "googleapis", version = "0.0.0-20240819-fe8ba054a")
bazel_dep(name = "grpc", version = "1.69.0")
bazel_dep(name = "protobuf", version = "29.2")
bazel_dep(name = "rules_go", version = "0.53.0")
bazel_dep(name = "rules_nodejs", version = "6.3.0")
bazel_dep(name = "rules_oci", version = "2.0.1")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_python", version = "0.40.0")
bazel_dep(name = "rules_rust", version = "0.56.0")
bazel_dep(name = "rules_rust_prost", version = "0.56.0")
bazel_dep(name = "rules_wasm", version = "1.1.1")
bazel_dep(name = "cri-api")
git_override(
    module_name = "cri-api",
    commit = "010fdf8d785a7f35fa5a1cc80c40bde0c13e1dfd",
    patches = ["dev/patches/cri-api.patch"],
    remote = "git@github.com:kubernetes/cri-api.git",
)
bazel_dep(name = "rules_k8s")
git_override(
    module_name = "rules_k8s",
    commit = "caa95654506600de8be345aa1bbbe435a880870d",
    remote = "git@github.com:vimana-cloud/rules_k8s.git",
)
bazel_dep(name = "runtime-class-manager")
git_override(
    module_name = "runtime-class-manager",
    commit = "c8afc93d6cabe4e0e9555a587e072b2f1fdc3bba",
    remote = "git@github.com:vimana-cloud/runtime-class-manager.git",
)

# Register Protobuf toolchains.
register_toolchains("//:protoc-rust-toolchain")

# Build Google API interfaces for Go.
switched_rules = use_extension("@googleapis//:extensions.bzl", "switched_rules")
switched_rules.use_languages(go = True)
use_repo(switched_rules, "com_google_googleapis_imports")

# Rust setup:

crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate")
crate.spec(
    package = "axum",
    version = "0.7.9",
)
crate.spec(
    package = "anyhow",
    version = "1.0.94",
)
crate.spec(
    package = "log",
    version = "0.4.25",
    features = ["kv"],
)
crate.spec(
    package = "bytes",
    version = "1.7.2",
)
crate.spec(
    package = "opentelemetry",
    version = "0.27.0",
)
crate.spec(
    package = "opentelemetry-appender-log",
    version = "0.27.0",
)
crate.spec(
    package = "opentelemetry_sdk",
    version = "0.27.0",
    features = ["rt-tokio"],
)
crate.spec(
    package = "opentelemetry-stdout",
    version = "0.27.0",
)
crate.spec(
    features = ["derive"],
    package = "clap",
    version = "4.5.19",
)
crate.spec(
    package = "futures",
    version = "0.3.31",
)
crate.spec(
    package = "http",
    version = "1.1.0",
)
crate.spec(
    package = "httpdate",
    version = "1.0.3",
)
crate.spec(
    package = "http-body",
    version = "1.0.1",
)
crate.spec(
    package = "http-body-util",
    version = "0.1.2",
)
crate.spec(
    features = [
        "server",
        "http1",
    ],
    package = "hyper",
    version = "1.4.1",
)
crate.spec(
    features = ["tokio"],
    package = "hyper-util",
    version = "0.1.8",
)
crate.spec(
    package = "lazy_static",
    version = "1.5.0",
)
crate.spec(
    package = "moka",
    version = "0.12.10",
    features = [
        "future",
    ],
)
crate.spec(
    package = "papaya",
    version = "0.1.3",
)
crate.spec(
    package = "prost",
    version = "0.13.2",
)
crate.spec(
    package = "prost-types",
    version = "0.13.2",
)
crate.spec(
    package = "protoc-gen-prost",
    version = "0.4.0",
)
crate.spec(
    package = "protoc-gen-tonic",
    version = "0.4.1",
)
crate.spec(
    package = "regex",
    version = "1.10.6",
)
crate.spec(
    features = [
        "blocking",
        "json",
    ],
    package = "reqwest",
    version = "0.12.8",
)
crate.spec(
    package = "serde",
    version = "1.0.217",
)
crate.spec(
    features = [
        "macros",
        "rt-multi-thread",
        "signal",
        "sync",
    ],
    package = "tokio",
    version = "1.40.0",
)
crate.spec(
    features = ["net"],
    package = "tokio-stream",
    version = "0.1.16",
)
crate.spec(
    package = "tonic",
    version = "0.12.2",
)
crate.spec(
    package = "tower",
    version = "0.5.1",
)
crate.spec(
    package = "tower-service",
    version = "0.3.3",
)
crate.spec(
    package = "tracing",
    version = "0.1.41",
)
crate.spec(
    package = "tracing-subscriber",
    version = "0.3.19",
    features = ["json"],
)
crate.spec(
    package = "wasmtime",
    version = "24.0.0",
)

# Generate certain binaries needed for building.
crate.annotation(
    crate = "protoc-gen-prost",
    gen_binaries = ["protoc-gen-prost"],
)
crate.annotation(
    crate = "protoc-gen-tonic",
    gen_binaries = ["protoc-gen-tonic"],
)
crate.from_specs()
use_repo(crate, "crates")

# Go setup:

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
use_repo(
    go_deps,
    "io_k8s_client_go",
    "org_golang_google_grpc",
    "org_uber_go_zap",
)

# Python setup (for testing):

# https://www.python.org/downloads/
python_version = "3.13"

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = python_version,
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pypi",
    python_version = python_version,
    requirements_lock = "requirements.txt",
)
use_repo(pip, "pypi")

# Docker setup (for build and running the API server):

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

# Distroless base for the API server image.
# https://console.cloud.google.com/artifacts/docker/distroless/us/gcr.io/base
oci.pull(
    name = "distroless-base",
    digest = "sha256:8fe31fb9d159141d9c3ff99f1fd287239d89d97ea95fea1f08f82ea5f2b544da",
    image = "gcr.io/distroless/base",
    platforms = ["linux/amd64"],
)

# Kicbase is the base for the Minikube node image used in end-to-end tests.
# https://github.com/kubernetes/minikube/blob/v1.35.0/pkg/drivers/kic/types.go#L30
oci.pull(
    name = "kicbase",
    digest = "sha256:fd2d445ddcc33ebc5c6b68a17e6219ea207ce63c005095ea1525296da2d1a279",
    image = "gcr.io/k8s-minikube/kicbase",
    platforms = ["linux/amd64"],
)

use_repo(
    oci,
    "distroless-base",
    "distroless-base_linux_amd64",
    "kicbase",
    "kicbase_linux_amd64",
)

# NodeJS setup (for serving documentation with VitePress):

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain()
use_repo(node, "nodejs")
