module(name = "vimana")

bazel_dep(name = "buildifier_prebuilt", version = "7.3.1", dev_dependency = True, repo_name = "buildtools")

bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "gazelle", version = "0.40.0")
bazel_dep(name = "googleapis", version = "0.0.0-20240819-fe8ba054a")
bazel_dep(name = "grpc", version = "1.69.0")
bazel_dep(name = "openssl", version = "3.3.1.bcr.1")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "protobuf", version = "29.2")
bazel_dep(name = "toolchains_musl", version = "0.1.20")
bazel_dep(name = "rules_go", version = "0.53.0")
bazel_dep(name = "rules_nodejs", version = "6.3.0")
bazel_dep(name = "rules_oci", version = "2.0.1")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_python", version = "0.40.0")
bazel_dep(name = "rules_rust", version = "0.57.1")
bazel_dep(name = "rules_rust_prost", version = "0.56.0")
bazel_dep(name = "rules_wasm", version = "1.1.1")
bazel_dep(name = "cri-api")
git_override(
    module_name = "cri-api",
    commit = "010fdf8d785a7f35fa5a1cc80c40bde0c13e1dfd",
    patches = ["dev/patches/cri-api.patch"],
    remote = "git@github.com:kubernetes/cri-api.git",
)

bazel_dep(name = "rules_k8s")
git_override(
    module_name = "rules_k8s",
    commit = "889a31bd563a898e5d64457fe98841467f3575e8",
    remote = "git@github.com:vimana-cloud/rules_k8s.git",
)

# Register Protobuf toolchains.
register_toolchains("//:protoc-rust-toolchain")

# Build Google API interfaces for Go.
switched_rules = use_extension("@googleapis//:extensions.bzl", "switched_rules")
switched_rules.use_languages(go = True)
use_repo(switched_rules, "com_google_googleapis_imports")

# Rust setup:

RUST_EDITION = "2021"

# Must use nightly to take advantage of experimental features (`#![feature]`).
# https://github.com/bazelbuild/rules_rust/blob/0.61.0/rust/private/common.bzl#L36
RUST_VERSION = "nightly/2025-04-03"

# Make sure we have a toolchain that can cross-compile to x86-64 / Linux / musl.
# https://github.com/bazelbuild/rules_rust/blob/0.59.1/examples/musl_cross_compiling/MODULE.bazel
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = RUST_EDITION,
    sha256s = {
        "2025-03-18/rustc-nightly-x86_64-unknown-linux-gnu.tar.xz": "b55983bf3bcdd04d2f344535886c857ad13725332831c48f7de758cb6d27fc01",
        "2025-03-18/clippy-nightly-x86_64-unknown-linux-gnu.tar.xz": "3a9785a2206a4fdeafdb5ebef95a83e7c10200ab4e3dc91f3bfc2be84174aa32",
        "2025-03-18/cargo-nightly-x86_64-unknown-linux-gnu.tar.xz": "68c38009d1042018bdd5e5a7d7edd8b04bfb70add44007c2208f9b45f72715e8",
        "2025-03-18/llvm-tools-nightly-x86_64-unknown-linux-gnu.tar.xz": "0685edcaead504dcf5071d076affb0d87887000f504b3217a1a5bea2059a9c26",
        "2025-03-18/rust-std-nightly-x86_64-unknown-linux-musl.tar.xz": "b9699deee3ab0b508ad1d8924ebee2a8dbf26b84b56e4c66da8beca55e8e7517",
    },
    versions = [RUST_VERSION],
)
rust.repository_set(
    name = "rust_linux_x86_64",
    edition = RUST_EDITION,
    exec_triple = "x86_64-unknown-linux-gnu",
    target_compatible_with = [
        "//dev:unknown",
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_triple = "x86_64-unknown-linux-gnu",
    versions = [RUST_VERSION],
)
rust.repository_set(
    name = "rust_linux_x86_64",
    target_compatible_with = [
        "//dev:musl",
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_triple = "x86_64-unknown-linux-musl",
)
rust.repository_set(
    name = "rust_darwin_x86_64",
    edition = RUST_EDITION,
    exec_triple = "x86_64-apple-darwin",
    target_compatible_with = [
        "//dev:musl",
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_triple = "x86_64-unknown-linux-musl",
    versions = [RUST_VERSION],
)
rust.repository_set(
    name = "rust_darwin_aarch64",
    edition = RUST_EDITION,
    exec_triple = "aarch64-apple-darwin",
    target_compatible_with = [
        "//dev:musl",
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_triple = "x86_64-unknown-linux-musl",
    versions = [RUST_VERSION],
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

toolchains_musl = use_extension("@toolchains_musl//:toolchains_musl.bzl", "toolchains_musl")
toolchains_musl.config(
    extra_target_compatible_with = ["//dev:musl"],
)

crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate")
crate.spec(
    package = "anyhow",
    version = "1.0.94",
)
crate.spec(
    package = "axum",
    version = "0.7.9",
)
crate.spec(
    package = "bytes",
    version = "1.7.2",
)
crate.spec(
    features = ["kv"],
    package = "log",
    version = "0.4.25",
)
crate.spec(
    package = "opentelemetry",
    version = "0.27.0",
)
crate.spec(
    package = "opentelemetry-appender-tracing",
    version = "0.27.0",
)
crate.spec(
    features = ["rt-tokio"],
    package = "opentelemetry_sdk",
    version = "0.27.0",
)
crate.spec(
    package = "opentelemetry-stdout",
    version = "0.27.0",
)
crate.spec(
    features = ["derive"],
    package = "clap",
    version = "4.5.19",
)
crate.spec(
    package = "futures",
    version = "0.3.31",
)
crate.spec(
    package = "http",
    version = "1.1.0",
)
crate.spec(
    package = "httpdate",
    version = "1.0.3",
)
crate.spec(
    package = "http-body",
    version = "1.0.1",
)
crate.spec(
    package = "http-body-util",
    version = "0.1.2",
)
crate.spec(
    features = [
        "server",
        "http1",
    ],
    package = "hyper",
    version = "1.4.1",
)
crate.spec(
    features = ["tokio"],
    package = "hyper-util",
    version = "0.1.8",
)
crate.spec(
    package = "lazy_static",
    version = "1.5.0",
)
crate.spec(
    package = "papaya",
    version = "0.1.3",
)
crate.spec(
    package = "prost",
    version = "0.13.2",
)
crate.spec(
    package = "prost-types",
    version = "0.13.2",
)
crate.spec(
    package = "protoc-gen-prost",
    version = "0.4.0",
)
crate.spec(
    package = "protoc-gen-tonic",
    version = "0.4.1",
)
crate.spec(
    package = "regex",
    version = "1.10.6",
)
crate.spec(
    features = [
        "blocking",
        "json",
    ],
    package = "reqwest",
    version = "0.12.8",
)
crate.spec(
    package = "serde",
    version = "1.0.217",
)
crate.spec(
    package = "sha2",
    version = "0.10.8",
)
crate.spec(
    features = ["std"],
    package = "serde_json",
    version = "1.0.140",
)
crate.spec(
    features = [
        "macros",
        "process",
        "rt-multi-thread",
        "signal",
        "fs",
        "sync",
    ],
    package = "tokio",
    version = "1.40.0",
)
crate.spec(
    features = ["net"],
    package = "tokio-stream",
    version = "0.1.16",
)
crate.spec(
    package = "tonic",
    version = "0.12.2",
)
crate.spec(
    package = "tower",
    version = "0.5.1",
)
crate.spec(
    package = "tower-service",
    version = "0.3.3",
)
crate.spec(
    package = "tracing",
    version = "0.1.41",
)
crate.spec(
    features = ["json"],
    package = "tracing-subscriber",
    version = "0.3.19",
)
crate.spec(
    package = "wasmtime",
    version = "24.0.0",
)

# Generate certain binaries needed for building.
crate.annotation(
    crate = "protoc-gen-prost",
    gen_binaries = ["protoc-gen-prost"],
)
crate.annotation(
    crate = "protoc-gen-tonic",
    gen_binaries = ["protoc-gen-tonic"],
)

# https://github.com/bazelbuild/rules_rust/issues/1519#issuecomment-2459048249
crate.annotation(
    build_script_data = [
        "@openssl//:gen_dir",
    ],
    build_script_env = {
        "OPENSSL_NO_VENDOR": "1",
        "OPENSSL_LIB_DIR": "$(location @openssl//:gen_dir)/lib",
        "OPENSSL_INCLUDE_DIR": "$(location @openssl//:gen_dir)/include",
        "OPENSSL_STATIC": "1",
    },
    crate = "openssl-sys",
)

inject_repo(crate, "openssl")

crate.from_specs(
    # Hardcode all supported Rust toolchains to make Cargo splicing more efficient.
    # https://github.com/bazelbuild/rules_rust/discussions/2259
    supported_platform_triples = [
        "aarch64-unknown-linux-gnu",
        "aarch64-apple-darwin",
        # TODO: Updgrade to wasip2 when there's an available platform
        #       (`@platforms//os:wasi` is only supported by wasip1).
        "wasm32-wasip1",
        "x86_64-unknown-linux-gnu",
        "x86_64-apple-darwin",
    ],
)
use_repo(crate, "crates")

# Go setup:

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
use_repo(
    go_deps,
    "io_k8s_client_go",
    "org_golang_google_grpc",
    "org_uber_go_zap",
)

# Python setup (for testing):

# https://www.python.org/downloads/
python_version = "3.13"

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = python_version,
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pypi",
    python_version = python_version,
    requirements_lock = "requirements.txt",
)
use_repo(pip, "pypi")

# Docker setup (for build and running the API server):

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

# Distroless base for the API server image.
# TODO: Delete this once the API is built to Wasm.
# https://console.cloud.google.com/artifacts/docker/distroless/us/gcr.io/base
oci.pull(
    name = "distroless-base",
    digest = "sha256:8fe31fb9d159141d9c3ff99f1fd287239d89d97ea95fea1f08f82ea5f2b544da",
    image = "gcr.io/distroless/base",
    platforms = ["linux/amd64"],
)

# Kicbase is the base for the Minikube node image used in end-to-end tests.
# https://github.com/kubernetes/minikube/blob/v1.36.0/pkg/drivers/kic/types.go#L30
oci.pull(
    name = "kicbase",
    image = "gcr.io/k8s-minikube/kicbase@sha256:6ed579c9292b4370177b7ef3c42cc4b4a6dcd0735a1814916cbc22c8bf38412b",
    platforms = ["linux/amd64"],
)
use_repo(
    oci,
    "distroless-base",
    "distroless-base_linux_amd64",
    "kicbase",
    "kicbase_linux_amd64",
)

# NodeJS setup (for serving documentation with VitePress):

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain()
use_repo(node, "nodejs")
